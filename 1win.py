import os
import random
import sqlite3
import logging
import io
from datetime import datetime, timedelta
from contextlib import contextmanager
from PIL import Image, ImageDraw, ImageFont, ImageFilter

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    JobQueue
)
from apscheduler.schedulers.background import BackgroundScheduler
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv('BOT_TOKEN', '7927368928:AAFwiYztldKI3o6PMQtQWsQdfpVP69yAeUM')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')  # –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Render
IMAGE_FOLDER = "images"
WELCOME_IMAGE = os.path.join(IMAGE_FOLDER, "menu.jpg")
REGISTER_IMAGE = os.path.join(IMAGE_FOLDER, "register.jpg")
MINES_IMAGES_FOLDER = os.path.join(IMAGE_FOLDER, "mines")
FONT_PATH = "arialbd.ttf"
DB_NAME = "users.db"
ADMINS = [6205472542, 1244177716]
PORT = int(os.getenv('PORT', 10000))

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
COLORS = {
    "dark_blue": (0, 0, 0),
    "blue": (30, 58, 138),
    "gold": (255, 215, 0),
    "white": (255, 255, 255),
    "gray": (148, 163, 184),
    "glow": (255, 255, 255)
}

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
@contextmanager
def get_db_connection():
    conn = sqlite3.connect(DB_NAME, timeout=30)
    conn.row_factory = sqlite3.Row
    try:
        yield conn
    finally:
        conn.close()

@contextmanager
def get_db_cursor():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        try:
            yield cursor
            conn.commit()
        except:
            conn.rollback()
            raise

def init_db():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                registered INTEGER DEFAULT 0,
                deposit INTEGER DEFAULT 0,
                approved INTEGER DEFAULT 0,
                last_activity TEXT,
                win_id TEXT
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS registration_requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER NOT NULL,
                win_id TEXT,
                timestamp TEXT NOT NULL,
                status TEXT DEFAULT 'pending'
            )
        ''')

def get_user_data(user_id):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT registered, deposit, approved, win_id 
            FROM users 
            WHERE user_id = ?
        ''', (user_id,))
        result = cursor.fetchone()
        return {
            'registered': bool(result[0]) if result else False,
            'deposit': bool(result[1]) if result else False,
            'approved': bool(result[2]) if result else False,
            'win_id': result[3] if result else None
        }

def update_user(user_id, **kwargs):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        now = datetime.now().isoformat()
        
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        if user:
            registered = kwargs.get('registered', user['registered'])
            deposit = kwargs.get('deposit', user['deposit'])
            approved = kwargs.get('approved', user['approved'])
            win_id = kwargs.get('win_id', user['win_id'])
            
            cursor.execute('''
                UPDATE users SET 
                registered = ?, 
                deposit = ?, 
                approved = ?, 
                last_activity = ?, 
                win_id = ?
                WHERE user_id = ?
            ''', (int(registered), int(deposit), int(approved), now, win_id, user_id))
        else:
            cursor.execute('''
                INSERT INTO users (
                    user_id, 
                    registered, 
                    deposit, 
                    approved, 
                    last_activity, 
                    win_id
                ) VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                user_id,
                int(kwargs.get('registered', False)),
                int(kwargs.get('deposit', False)),
                int(kwargs.get('approved', False)),
                now,
                kwargs.get('win_id', None)
            ))

# ========== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ==========
def generate_gradient(width, height, start_color, end_color, horizontal=False):
    gradient = Image.new('RGB', (width, height))
    draw = ImageDraw.Draw(gradient)

    for i in range(width if horizontal else height):
        ratio = i / (width if horizontal else height)
        r = int(start_color[0] + (end_color[0] - start_color[0]) * ratio)
        g = int(start_color[1] + (end_color[1] - start_color[1]) * ratio)
        b = int(start_color[2] + (end_color[2] - start_color[2]) * ratio)

        if horizontal:
            draw.line([(i, 0), (i, height)], fill=(r, g, b))
        else:
            draw.line([(0, i), (width, i)], fill=(r, g, b))

    return gradient

def add_glow_effect(draw, text, position, font, glow_color, iterations=10):
    for i in range(iterations, 0, -1):
        offset = i * 2
        alpha = int(255 * (i/iterations))
        glow_color_with_alpha = (*glow_color[:3], alpha)

        bbox = font.getbbox(text)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

        temp_img = Image.new('RGBA', (text_width + offset*2, text_height + offset*2))
        temp_draw = ImageDraw.Draw(temp_img)
        temp_draw.text((offset, offset), text, font=font, fill=glow_color_with_alpha)

        temp_img = temp_img.filter(ImageFilter.GaussianBlur(radius=i))

        main_img = Image.new('RGBA', temp_img.size)
        main_img.paste(temp_img, (0, 0), temp_img)
        draw.bitmap((position[0]-offset, position[1]-offset), main_img)

def generate_signal_image(coefficient):
    coefficient_text = f"{coefficient}X"
    width, height = 800, 600

    image = generate_gradient(width, height, COLORS["dark_blue"], COLORS["blue"])
    draw = ImageDraw.Draw(image)

    try:
        font_large = ImageFont.truetype(FONT_PATH, 120)
        font_medium = ImageFont.truetype(FONT_PATH, 40)
    except:
        font_large = ImageFont.load_default(size=120)
        font_medium = ImageFont.load_default(size=40)

    bbox = font_large.getbbox(coefficient_text)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]
    text_position = ((width - text_width) // 2, (height - text_height) // 2 - 50)

    add_glow_effect(draw, coefficient_text, text_position, font_large, COLORS["glow"])
    draw.text(text_position, coefficient_text, fill=COLORS["gold"], font=font_large)

    signature = "–í–ê–® –°–ò–ì–ù–ê–õ"
    bbox = font_medium.getbbox(signature)
    sig_width = bbox[2] - bbox[0]
    signature_position = ((width - sig_width) // 2, height - 100)
    draw.text(signature_position, signature, fill=COLORS["white"], font=font_medium)

    img_buffer = io.BytesIO()
    image.save(img_buffer, format='PNG', quality=95)
    img_buffer.seek(0)
    return img_buffer

def get_random_mines_image():
    try:
        if not os.path.exists(MINES_IMAGES_FOLDER):
            os.makedirs(MINES_IMAGES_FOLDER, exist_ok=True)
            raise FileNotFoundError("–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ Mines –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        images = [f for f in os.listdir(MINES_IMAGES_FOLDER)
                 if f.lower().endswith(('.png', '.jpg', '.jpeg'))]

        if not images:
            raise FileNotFoundError("–í –ø–∞–ø–∫–µ mines –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        random_image = random.choice(images)
        image_path = os.path.join(MINES_IMAGES_FOLDER, random_image)

        with open(image_path, 'rb') as img_file:
            img_bytes = io.BytesIO(img_file.read())
            img_bytes.seek(0)
            return img_bytes

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Mines: {e}")
        buffer = io.BytesIO()
        img = Image.new('RGB', (400, 200), (10, 10, 30))
        draw = ImageDraw.Draw(img)
        draw.text((50, 80), "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Mines", fill=(255, 255, 255))
        img.save(buffer, format='PNG')
        buffer.seek(0)
        return buffer

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
        [InlineKeyboardButton("üìï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")],
        [InlineKeyboardButton("üíµ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
        [InlineKeyboardButton("üí¨ –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ])

def register_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîó –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", url="https://1wkebz.life/?open=register&p=s7hc")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="check_registration")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

def game_selection_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí£ Mines", callback_data="game_mines")],
        [InlineKeyboardButton("üöÄ Lucky Jet", callback_data="game_luckyjet")],
        [InlineKeyboardButton("ü™ô –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞", callback_data="game_coinflip")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

def signal_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé∞ –°–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª", callback_data="generate_signal")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    update_user(user_id=user_id)
    
    try:
        if os.path.exists(WELCOME_IMAGE):
            with open(WELCOME_IMAGE, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=main_menu_keyboard()
                )
        else:
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    data = query.data

    try:
        if data == "register":
            text = (
                "üåê –®–∞–≥ 1 - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è.\n\n"
                "‚ÄºÔ∏è–ê–ö–ö–ê–£–ù–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ù–û–í–´–ú‚ÄºÔ∏è\n\n"
                "1Ô∏è‚É£ –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø' –≤—ã –ø–æ–ø–∞–¥–∞–µ—Ç–µ –Ω–∞ —Å—Ç–∞—Ä—ã–π –∞–∫–∫–∞—É–Ω—Ç ‚Äî –∏–∑ –Ω–µ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É.\n\n"
                "2Ô∏è‚É£ –í–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ üëâ Sally1w üëà\n"
                "[–≠—Ç–æ –≤–∞–∂–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—à –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏]\n\n"
                "3Ô∏è‚É£ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äî üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n"
                "‚ùóÔ∏è–ï—Å–ª–∏ –≤—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ —à–∞–≥–∏, –Ω–∞—à –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö‚ùóÔ∏è\n\n"
                "ü§ù –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
            )
            if os.path.exists(REGISTER_IMAGE):
                with open(REGISTER_IMAGE, 'rb') as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption=text,
                        reply_markup=register_menu()
                    )
            else:
                await query.message.reply_text(text, reply_markup=register_menu())

        elif data == "get_signal":
            if not user_data['registered']:
                await query.answer("‚ö† –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
                await query.message.edit_text(
                    "‚õî –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                    ])
                )
                return

            if not user_data['approved']:
                await query.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
                await query.message.edit_text(
                    "üïí –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                    "–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                    ])
                )
                return

            if not user_data['deposit']:
                await query.answer("‚ö† –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç!", show_alert=True)
                await query.message.edit_text(
                    "üí≥ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏–≥–Ω–∞–ª–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç!\n\n"
                    "–ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üí≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç", callback_data="confirm_deposit")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                    ])
                )
                return

            await query.message.edit_text(
                "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞:",
                reply_markup=game_selection_keyboard()
            )

        elif data == "game_mines":
            try:
                img_bytes = get_random_mines_image()
                await query.message.reply_photo(
                    photo=img_bytes,
                    caption="üí£ Mines: –í–∞—à —Å–∏–≥–Ω–∞–ª!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üé∞ –°–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª", callback_data="game_mines")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="get_signal")]
                    ])
                )
            except Exception as e:
                logger.error(f"Error in game_mines handler: {e}")
                await query.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞", show_alert=True)

        elif data == "back_to_menu":
            if os.path.exists(WELCOME_IMAGE):
                with open(WELCOME_IMAGE, 'rb') as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        reply_markup=main_menu_keyboard()
                    )
            else:
                await query.message.reply_text(
                    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=main_menu_keyboard()
                )

    except Exception as e:
        logger.error(f"Error in button handler: {e}")
        await query.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def keep_alive(context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        if WEBHOOK_URL:
            requests.get(f"{WEBHOOK_URL}/keepalive", timeout=10)
        logger.info("Keep-alive triggered")
    except Exception as e:
        logger.error(f"Keep-alive error: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    try:
        await context.bot.send_message(
            chat_id=ADMINS[0],
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}\n\nUpdate: {update}"
        )
    except:
        pass

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    os.makedirs(IMAGE_FOLDER, exist_ok=True)
    os.makedirs(MINES_IMAGES_FOLDER, exist_ok=True)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º JobQueue –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        job_queue = application.job_queue
        job_queue.run_repeating(
            keep_alive,
            interval=timedelta(minutes=14),
            first=10
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("moderate", moderate))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_id))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(CallbackQueryHandler(handle_admin_decision, pattern=r'^(approve|reject)_\d+_\d+$'))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        if WEBHOOK_URL:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ")
            application.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=BOT_TOKEN,
                webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}",
                drop_pending_updates=True
            )
        else:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ")
            application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()
